{{- if .Values.hdfs.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ printf "%s-namenode" (include "hdfs.name" .) }}
  namespace: {{ .Release.Namespace | quote }}
  labels: 
    {{- include "hdfs.labels" . | nindent 4}}
    app.kubernetes.io/component: namenode
spec:
  selector:
    matchLabels: 
      {{- include "hdfs.selectorLabels" . | nindent 6}}
      app.kubernetes.io/component: namenode
  serviceName: {{ printf "%s-headless" (include "hdfs.name" .) }}
  replicas: 1
  template:
    metadata:
      labels: 
        {{- include "hdfs.labels" . | nindent 8}}
        app.kubernetes.io/component: namenode
    spec:
      volumes:
        - name: hdfs-configmap
          configMap:
            name: hdfs-configmap
      initContainers:
        - name: init-chown
          image: busybox
          command: ['sh', '-c', 'chown -R 1000:1000 {{ .Values.hdfs.namenode.dir }} && chmod -R 755 {{ .Values.hdfs.namenode.dir }}']
          volumeMounts:
            - name: hdfs-namenode-data
              mountPath: {{ .Values.hdfs.namenode.dir }}
      containers:
      - name: hdfs-namenode
        image: {{ include "hdfs.image" . }}
        imagePullPolicy: {{ .Values.hdfs.image.pullPolicy | quote }}
        {{- if .Values.hdfs.namenode.resources }}
        resources: {{- toYaml .Values.hdfs.namenode.resources | nindent 10 }}
        {{- end}}
        volumeMounts:
          - mountPath: /opt/hadoop/etc/hadoop/core-site.xml
            name: hdfs-configmap
            subPath: core-site.xml
          - mountPath: /opt/hadoop/etc/hadoop/hdfs-site.xml
            name: hdfs-configmap
            subPath: hdfs-site.xml
          - mountPath: {{ .Values.hdfs.namenode.dir }}
            name: hdfs-namenode-data
            
        command: ["/bin/sh"]
        args: ["-c", "if [ ! -f {{ .Values.hdfs.namenode.dir }}/current/VERSION ]; then hdfs namenode -format -force; fi && exec hdfs namenode"]

      {{- if .Values.affinity.enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions: [{key: 'app.kubernetes.io/name', operator: In, values: [ {{ include "hdfs.name" . }} ]}]
            topologyKey: "kubernetes.io/hostname"
      {{- end }}

  volumeClaimTemplates:
  - metadata:
      name: hdfs-namenode-data
    spec:
      storageClassName: hdfs-storage
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ printf "%s-datanode" (include "hdfs.name" .) }}
  namespace: {{ .Release.Namespace | quote }}
  labels: 
    {{- include "hdfs.labels" . | nindent 4}}
    app.kubernetes.io/component: datanode
spec:
  selector:
    matchLabels: 
      {{- include "hdfs.selectorLabels" . | nindent 6}}
      app.kubernetes.io/component: datanode
  serviceName: {{ printf "%s-headless" (include "hdfs.name" .) }}
  replicas: {{ .Values.hdfs.datanode.replicaCount }}
  template:
    metadata:
      labels: 
        {{- include "hdfs.labels" . | nindent 8}}
        app.kubernetes.io/component: datanode
    spec:
      volumes:
        - name: hdfs-configmap
          configMap:
            name: hdfs-configmap
      initContainers:
        - name: init-chown
          image: busybox
          command: ['sh', '-c', 'chown -R 1000:1000 {{ .Values.hdfs.datanode.dir }} && chmod -R 755 {{ .Values.hdfs.datanode.dir }}']
          volumeMounts:
          - name: hdfs-datanode-data
            mountPath: {{ .Values.hdfs.datanode.dir }}
      containers:
      - name: hdfs-datanode
        image: {{ include "hdfs.image" . }}
        imagePullPolicy: {{ .Values.hdfs.image.pullPolicy | quote }}
        {{- if .Values.hdfs.datanode.resources }}
        resources: {{- toYaml .Values.hdfs.datanode.resources | nindent 10 }}
        {{- end}}
        volumeMounts:
          - mountPath: /opt/hadoop/etc/hadoop/core-site.xml
            name: hdfs-configmap
            subPath: core-site.xml
          - mountPath: /opt/hadoop/etc/hadoop/hdfs-site.xml
            name: hdfs-configmap
            subPath: hdfs-site.xml
          - mountPath: {{ .Values.hdfs.datanode.dir }}
            name: hdfs-datanode-data
            
        command: ["hdfs", "datanode"]

      {{- if .Values.affinity.enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
                            matchExpressions: [{key: 'app.kubernetes.io/name', operator: In, values: [ {{ include "hdfs.name" . }} ]}]
            topologyKey: "kubernetes.io/hostname"
      {{- end }}

  volumeClaimTemplates:
  - metadata:
      name: hdfs-datanode-data
    spec:
      storageClassName: hdfs-storage
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
{{- end }}
