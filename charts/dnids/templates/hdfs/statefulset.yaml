{{- if .Values.hdfs.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ printf "%s-namenode" (include "hdfs.name" .) }}
  namespace: {{ .Release.Namespace | quote }}
  labels: 
    {{- include "hdfs.labels" . | nindent 4}}
    app.kubernetes.io/component: namenode
spec:
  selector:
    matchLabels: 
      {{- include "hdfs.selectorLabels" . | nindent 6}}
      app.kubernetes.io/component: namenode
  serviceName: {{ printf "%s-headless" (include "hdfs.name" .) }}
  replicas: 1
  template:
    metadata:
      labels: 
        {{- include "hdfs.labels" . | nindent 8}}
        app.kubernetes.io/component: namenode
    spec:
      volumes:
        - name: hdfs-configmap
          configMap:
            name: hdfs-configmap
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-chown
          image: busybox
          command: ['sh', '-c', 'chown -R 1000:1000 {{ .Values.hdfs.namenode.mountPath }} && chmod -R 755 {{ .Values.hdfs.namenode.mountPath }}']
          volumeMounts:
            - name: data
              mountPath: {{ .Values.hdfs.namenode.mountPath }}
      containers:
      - name: hdfs-namenode
        image: {{ include "hdfs.image" . }}
        imagePullPolicy: {{ .Values.hdfs.image.pullPolicy | quote }}
        {{- if .Values.hdfs.namenode.resources }}
        resources: {{- toYaml .Values.hdfs.namenode.resources | nindent 10 }}
        {{- end}}
        volumeMounts:
          - name: hdfs-configmap
            mountPath: /opt/hadoop/etc/hadoop/
            readOnly: true
          - name: data
            mountPath: {{ .Values.hdfs.namenode.mountPath }}
        
        ports:
        - name: http
          protocol: TCP
          containerPort: {{ .Values.hdfs.namenode.containerPorts.http }}
          {{- (eq .Values.spark.service.type "ClusterIP") }}
          hostPort: {{ .Values.hdfs.namenode.ports.http }}
          {{- end }}
        - name: protocol
          protocol: TCP
          containerPort: {{ .Values.hdfs.namenode.containerPorts.protocol }}
            
        command: ["/bin/sh"]
        args: ["-c", "if [ ! -f {{ .Values.hdfs.namenode.mountPath }}/current/VERSION ]; then hdfs namenode -format -force; fi && exec hdfs namenode"]

      {{- if .Values.affinity.enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions: [{key: 'app.kubernetes.io/name', operator: In, values: [ {{ include "hdfs.name" . }} ]}]
            topologyKey: "kubernetes.io/hostname"
      {{- end }}

  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
      namespace: {{ .Release.Namespace | quote }}
      labels: 
        {{- include "hdfs.labels" . | nindent 8}}
        app.kubernetes.io/component: namenode
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.hdfs.namenode.persistence.size }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ printf "%s-datanode" (include "hdfs.name" .) }}
  namespace: {{ .Release.Namespace | quote }}
  labels: 
    {{- include "hdfs.labels" . | nindent 4}}
    app.kubernetes.io/component: datanode
spec:
  selector:
    matchLabels: 
      {{- include "hdfs.selectorLabels" . | nindent 6}}
      app.kubernetes.io/component: datanode
  serviceName: {{ printf "%s-headless" (include "hdfs.name" .) }}
  replicas: {{ .Values.hdfs.datanode.replicas }}
  template:
    metadata:
      labels: 
        {{- include "hdfs.labels" . | nindent 8}}
        app.kubernetes.io/component: datanode
    spec:
      volumes:
        - name: hdfs-configmap
          configMap:
            name: hdfs-configmap
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-chown
          image: busybox
          command: ['sh', '-c', 'chown -R 1000:1000 {{ .Values.hdfs.datanode.mountPath }} && chmod -R 755 {{ .Values.hdfs.datanode.mountPath }}']
          volumeMounts:
          - name: data
            mountPath: {{ .Values.hdfs.datanode.mountPath }}
      containers:
      - name: hdfs-datanode
        image: {{ include "hdfs.image" . }}
        imagePullPolicy: {{ .Values.hdfs.image.pullPolicy | quote }}

        {{- if .Values.hdfs.datanode.resources }}
        resources: {{- toYaml .Values.hdfs.datanode.resources | nindent 10 }}
        {{- end}}
        volumeMounts:
          - name: hdfs-configmap
            mountPath: /opt/hadoop/etc/hadoop/
            readOnly: true

          - name: data
            mountPath: {{ .Values.hdfs.datanode.mountPath }}

        ports:
        - name: http
          protocol: TCP
          containerPort: {{ .Values.hdfs.datanode.containerPorts.http }}
          {{- (eq .Values.spark.service.type "ClusterIP") }}
          hostPort: {{ .Values.hdfs.datanode.ports.http }}
          {{- end }}

        command: ["hdfs", "datanode"]

      {{- if .Values.affinity.enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions: [{key: 'app.kubernetes.io/name', operator: In, values: [ {{ include "hdfs.name" . }} ]}]
            topologyKey: "kubernetes.io/hostname"
      {{- end }}

  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
      namespace: {{ .Release.Namespace | quote }}
      labels: 
        {{- include "hdfs.labels" . | nindent 8}}
        app.kubernetes.io/component: datanode
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.hdfs.datanode.persistence.size }}
{{- end }}
